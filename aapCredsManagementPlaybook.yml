---
- name: Export credentials from source environment using awx-manage shell_plus
  hosts: "{{ source_host | default('sourcesys') }}"
  become: yes
  gather_facts: no
  collections:
    - community.general
  vars:
    # Use an absolute path for the exported file
    export_file: "/tmp/exported_creds.json"
    # Command to retrieve credentials from AWX via shell_plus
    awx_export_command: >
      awx-manage shell_plus --quiet --command "from awx.main.models import Credential; import json; print(json.dumps([{'id': c.id, 'name': c.name, 'credential_type': c.credential_type.name, 'inputs': c.inputs} for c in Credential.objects.all()]))"
  tasks:
    - name: Retrieve credentials from AWX using awx-manage shell_plus
      shell: "{{ awx_export_command }}"
      register: awx_creds
      changed_when: false

    - name: Fail if retrieval failed
      fail:
        msg: "Failed to retrieve credentials: {{ awx_creds.stderr }}"
      when: awx_creds.rc != 0

    - name: Validate and pretty-print JSON credentials
      set_fact:
        creds_json: "{{ awx_creds.stdout | from_json | to_nice_json }}"

    - name: Debug credentials JSON
      debug:
        msg: "{{ creds_json }}"
      run_once: true

    - name: Indicate start of saving credentials file locally
      debug:
        msg: "Saving credentials to {{ export_file }}"
      run_once: true

    - name: Save credentials to local file
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.copy:
        dest: "{{ export_file }}"
        content: "{{ creds_json }}"
      run_once: true

    - name: Indicate successful saving of credentials file
      debug:
        msg: "Credentials file saved to {{ export_file }}"
      run_once: true

    - name: Encrypt the exported credentials file with ansible-vault CLI
      delegate_to: localhost
      connection: local
      become: false
      shell: ansible-vault encrypt {{ export_file }} --vault-password-file {{ vault_password_file }}
      run_once: true

    - name: Record export report (credential names exported)
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.set_fact:
        export_report: "{{ {'exported': (creds_json | from_json | map(attribute='name') | list), 'skipped': []} }}"
      run_once: true

    - name: Trigger import handler after export tasks complete
      meta: flush_handlers

    - name: Persist report variables for later plays
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.add_host:
        name: report
        export_report: "{{ export_report }}"
        import_report: "{{ import_report | default({}) }}"
      run_once: true

  handlers:
    - name: import_credentials
      tags: import
      block:
        - name: Decrypt the exported credentials file for import (on localhost)
          delegate_to: localhost
          connection: local
          become: false
          shell: ansible-vault decrypt {{ export_file }} --vault-password-file {{ vault_password_file }} --output=/tmp/decrypted_creds.json
          run_once: true

        - name: Copy decrypted credentials file to destination host
          copy:
            src: "/tmp/decrypted_creds.json"
            dest: "/tmp/new_creds.json"
          delegate_to: "{{ destination_host }}"

        - name: Import credentials using awx-manage shell_plus on destination host
          delegate_to: "{{ destination_host }}"
          become: yes
          shell: >
            awx-manage shell_plus --quiet --command "import json;
            from awx.main.models import Credential, CredentialType;
            with open('/tmp/new_creds.json') as f:
                new_creds = json.load(f);
            imported = [];
            skipped = [];
            for cred in new_creds:
                if not Credential.objects.filter(name=cred['name']).exists():
                    ct = CredentialType.objects.get(name=cred['credential_type']);
                    Credential.objects.create(name=cred['name'], credential_type=ct, inputs=cred['inputs']);
                    imported.append(cred['name']);
                else:
                    skipped.append(cred['name']);
            print(json.dumps({'imported': imported, 'skipped': skipped}))"
          register: import_command_result

        - name: Set import report fact from command output
          delegate_to: localhost
          connection: local
          become: false
          ansible.builtin.set_fact:
            import_report: "{{ import_command_result.stdout | from_json }}"
          run_once: true

        - name: Clean up temporary credentials file on destination host
          file:
            path: "/tmp/new_creds.json"
            state: absent
          delegate_to: "{{ destination_host }}"
          become: yes

        - name: Remove decrypted credentials file on control node
          delegate_to: localhost
          connection: local
          become: false
          ansible.builtin.file:
            path: "/tmp/decrypted_creds.json"
            state: absent
          run_once: true

- name: Print final credentials report
  hosts: report
  gather_facts: no
  collections:
    - community.general
  tasks:
    - name: Display credentials export/import report
      debug:
        msg: |
          === Final Report ===
          Exported Credentials: {{ export_report.exported | default([]) }}
          Imported Credentials: {{ import_report.imported | default('None') }}
          {% if (export_report.skipped | default([])) | length > 0 %}
          Skipped on export: {{ export_report.skipped | default([]) }}
          {% endif %}
          {% if (import_report.skipped | default([])) | length > 0 %}
          Skipped on import: {{ import_report.skipped | default([]) }}
          {% endif %}
      run_once: true
