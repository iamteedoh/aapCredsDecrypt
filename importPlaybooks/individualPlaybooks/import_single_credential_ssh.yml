---
- name: "Import Credential (SSH): {{ cred_data.name }}"
  vars:
    inputs: {}  # Initialize empty inputs dictionary

  block:
    - name: Get credential type ID
      ansible.builtin.command: >
        awx-manage shell_plus --command="from awx.main.models import CredentialType; print(CredentialType.objects.get(name='{{ cred_data.credential_type }}').id)"
      delegate_to: "{{ awx_controller }}"  # Delegate to AWX/AAP controller
      become: true # added become: true to allow privilege escalation for awx-manage
      register: ct_id
      changed_when: false
      failed_when: ct_id.stdout == ""

    - name: Get organization ID (if provided)
      ansible.builtin.command: >
        awx-manage shell_plus --command="from awx.main.models import Organization; print(Organization.objects.get(id={{ cred_data.organization.id }}).id)"
      delegate_to: "{{ awx_controller }}"
      become: true # added become: true to allow privilege escalation for awx-manage
      register: org_id
      changed_when: false
      when: cred_data.organization is defined and cred_data.organization.id is defined

    - name: Set org_id to None
      ansible.builtin.set_fact:
        org_id:
          stdout: "None"
      when: cred_data.organization is not defined or cred_data.organization.id is not defined

    - name: Check for existing credential
      ansible.builtin.command: >
        awx-manage shell_plus --command="from awx.main.models import Credential, CredentialType, Organization;
        ct = CredentialType.objects.get(id={{ ct_id.stdout }});
        org = Organization.objects.get(id={{ org_id.stdout }}) if {{ org_id.stdout }} != 'None' else None;
        print(Credential.objects.filter(name='{{ cred_data.name }}', credential_type=ct, organization=org).exists())"
      delegate_to: "{{ awx_controller }}"
      become: true # added become: true to allow privilege escalation for awx-manage
      register: cred_exists
      changed_when: false

    - name: Skip if credential already exists
      ansible.builtin.meta: end_host
      when: cred_exists.stdout == "True"

    - name: Build inputs dictionary
      ansible.builtin.set_fact:
        inputs: "{{ inputs | combine({item.id: item.value}) }}"
      loop: "{{ cred_data.fields }}"
      loop_control:
        loop_var: item
      when: item.id is defined

    - name: Create credential
      ansible.builtin.command: >
        awx-manage shell_plus --command="
        from awx.main.models import Credential, CredentialType, Organization;
        import json;
        ct = CredentialType.objects.get(id={{ ct_id.stdout }});
        org = Organization.objects.get(id={{ org_id.stdout }}) if {{ org_id.stdout }} != 'None' else None;
        cred_obj = Credential(name='{{ cred_data.name }}', credential_type=ct, organization=org, inputs=json.loads('''{{ inputs | to_json }}'''));
        cred_obj.save();
        print(cred_obj.id)"
      delegate_to: "{{ awx_controller }}"
      become: true # added become: true to allow privilege escalation for awx-manage
      register: new_cred
      changed_when: new_cred.stdout != ""

    - name: Re-establish User Access (Iterative)
      ansible.builtin.include_tasks: reestablish_user_access_ssh.yml
      loop: "{{ cred_data.access_list }}"
      loop_control:
          loop_var: access_list_item
      when: cred_data.access_list is defined and access_list_item.type == 'user'

    - name: Re-establish Team Access (Iterative)
      ansible.builtin.include_tasks: reestablish_team_access_ssh.yml
      loop: "{{ cred_data.access_list }}"
      loop_control:
          loop_var: access_list_item
      when: cred_data.access_list is defined and access_list_item.type == 'team'

    - name: Re-establish Job Template Associations (Iterative)
      ansible.builtin.include_tasks: reestablish_jt_associations_ssh.yml
      loop: "{{ cred_data.related_job_templates }}"
      loop_control:
        loop_var: jt_data
      when: cred_data.related_job_templates is defined

    - name: Increment imported_count
      ansible.builtin.set_fact:
          imported_count: "{{ imported_count + 1 }}"

  rescue:
    - name: Handle credential import failure
      ansible.builtin.debug:
        msg: "Failed to import credential: {{ cred_data.name }}"

  always:
      - name: "Add credential to the duplicate array if it exists"
        ansible.builtin.set_fact:
          duplicates: "{{ duplicates + [cred_data.name] }}"
        when: cred_exists.stdout == "True"
