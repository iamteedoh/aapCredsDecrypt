---
- name: Export AWX objects and decrypt secret fields using awx-manage shell_plus
  hosts: "{{ source_host | default('sourcesys') }}"
  become: yes
  gather_facts: no
  collections:
    - community.general
  vars:
    export_file: "/tmp/exported_creds.json"
    awx_export_command: |
      awx-manage shell_plus --quiet --command '
      import json
      from awx.main.models import Credential, CredentialType, Organization, Project, JobTemplate, Team, Role, User
      from awx.main.utils.encryption import decrypt_value
      from django.utils.functional import Promise

      SECRET_FIELDS = ["password", "ssh_key_data", "ssh_key_unlock", "become_password", "vault_password", "authorize_password", "secret", "secret_key", "security_token"]
      CRED_TYPES_WITH_SECRETS = ["aws", "azure", "gce", "vmware", "satellite6", "cloudforms", "insights"]

      def stringify_lazy(obj):
          """Recursively convert lazy translation objects to strings."""
          if isinstance(obj, Promise):
              return str(obj)
          elif isinstance(obj, dict):
              return {k: stringify_lazy(v) for k, v in obj.items()}
          elif isinstance(obj, list):
              return [stringify_lazy(elem) for elem in obj]
          else:
              return obj

      decrypt_inputs = lambda inputs, cred_type: {} if inputs is None else {k:(decrypt_value(v, None) if (cred_type in CRED_TYPES_WITH_SECRETS and v is not None and k in SECRET_FIELDS and isinstance(v, str) and v.startswith("$encrypted$")) else v) for k,v in inputs.items()}

      output = {
          "credentials": [{"id": c.id, "name": str(c.name), "credential_type": str(c.credential_type.name), "inputs": decrypt_inputs(c.inputs, c.credential_type.kind)} for c in Credential.objects.all()],
          "credential_types": [{"id": ct.id, "name": str(ct.name), "kind": str(ct.kind)} for ct in CredentialType.objects.all()],
          "organizations": [{"id": org.id, "name": str(org.name)} for org in Organization.objects.all()],
          "projects": [{"id": p.id, "name": str(p.name)} for p in Project.objects.all()],
          "job_templates": [{"id": jt.id, "name": str(jt.name)} for jt in JobTemplate.objects.all()],
          "teams": [{"id": t.id, "name": str(t.name)} for t in Team.objects.all()],
          "roles": [{"id": r.id, "name": str(r.name)} for r in Role.objects.all()],
          "users": [{"id": u.id, "username": str(u.username)} for u in User.objects.all()]
      }
      print(json.dumps(stringify_lazy(output)))
      '
  tasks:
    - name: Retrieve AWX objects using awx-manage shell_plus
      shell: "{{ awx_export_command }}"
      register: awx_output
      # changed_when: false  <--- Removed.  Handlers need a changed task.

    - name: Fail if AWX export retrieval failed
      fail:
        msg: "AWX export failed: {{ awx_output.stderr }}"
      when: awx_output.rc != 0

    - name: Set output JSON from AWX
      set_fact:
        awx_export_json: "{{ awx_output.stdout | from_json | to_nice_json }}"

    - name: Debug AWX export JSON  # Keep this for now, in case export has subtle issues
      debug:
        msg: "{{ awx_export_json }}"
      run_once: true

    - name: Indicate start of saving AWX export to local file
      debug:
        msg: "Saving AWX export to {{ export_file }}"
      run_once: true

    - name: Save AWX export to local file
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.copy:
        dest: "{{ export_file }}"
        content: "{{ awx_export_json }}"
      run_once: true

    - name: Indicate successful saving of export file
      debug:
        msg: "AWX export saved to {{ export_file }}"
      run_once: true

    - name: Encrypt the exported file with ansible-vault CLI
      delegate_to: localhost
      connection: local
      become: false
      shell: ansible-vault encrypt {{ export_file }} --vault-password-file {{ vault_password_file }}
      run_once: true

    - name: Record export report
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.set_fact:
        export_report: "{{ awx_output.stdout | from_json | json_query('credentials[*].name') }}"
      run_once: true

    - name: Trigger import handler after export tasks complete
      meta: flush_handlers

    - name: Persist report variables for later plays
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.add_host:
        name: report
        export_report: "{{ export_report }}"
        import_report: "{{ import_report | default({}) }}"
        # report_output: |  # Removed: calculate this in the final play
        #   === Final Report ===
        #   Exported Credentials: {% if export_report | length > 0 %}{{ export_report }}{% else %}None{% endif %}
        #   Imported Credentials: {% if import_report.imported | length > 0 %}{{ import_report.imported }}{% else %}None{% endif %}
        #   Skipped on import: {% if import_report.skipped | length > 0 %}{{ import_report.skipped }}{% else %}None{% endif %}
      run_once: true

  handlers:
    - name: import_credentials
      tags: import
      block:
        - name: Decrypt the exported file for import (on localhost)
          delegate_to: localhost
          connection: local
          become: false
          shell: ansible-vault decrypt {{ export_file }} --vault-password-file {{ vault_password_file }} --output=/tmp/decrypted_creds.json
          run_once: true

        - name: Copy decrypted file to destination host
          copy:
            src: "/tmp/decrypted_creds.json"
            dest: "/tmp/new_export.json"
          delegate_to: "{{ destination_host }}"

        - name: Import AWX objects using awx-manage shell_plus on destination host
          delegate_to: "{{ destination_host }}"
          become: yes
          shell: |
            awx-manage shell_plus --quiet --command "import json; from awx.main.models import Credential, CredentialType, Organization, Project, JobTemplate, Team, Role, User;
            with open('/tmp/new_export.json') as f:
              data = json.load(f);
            imported = []; skipped = [];
            for cred in data.get('credentials', []):
              if not Credential.objects.filter(name=cred['name']).exists():
                ct = CredentialType.objects.get(name=cred['credential_type']);
                Credential.objects.create(name=cred['name'], credential_type=ct, inputs=cred['inputs']);
                imported.append(cred['name']);
              else:
                skipped.append(cred['name']);
            print(json.dumps({'imported': imported, 'skipped': skipped}))"
          register: import_command_result
          failed_when: false  # CRITICAL: Added back

        - name: Debug Import Result  # CRITICAL: Added back
          debug:
            var: import_command_result
          delegate_to: "{{ destination_host }}"  # Ensure we see output from the correct host

        - name: Set import report fact from command output
          delegate_to: localhost
          connection: local
          become: false
          ansible.builtin.set_fact:
            import_report: "{{ import_command_result.stdout | from_json | default({}) }}"  # Added default({})
          run_once: true
          failed_when: false # Keep this

        - name: Clean up temporary export file on destination host
          file:
            path: "/tmp/new_export.json"
            state: absent
          delegate_to: "{{ destination_host }}"
          become: yes

        - name: Remove decrypted file on control node
          delegate_to: localhost
          connection: local
          become: false
          ansible.builtin.file:
            path: "/tmp/decrypted_creds.json"
            state: absent
          run_once: true

- name: Print final AWX export/import report
  hosts: report
  gather_facts: no
  collections:
    - community.general
  tasks:
    - name: Display AWX export/import report
      debug: #Revert back to original
        var: report_output
      run_once: true
      vars:
        report_output: |
          === Final Report ===
          Exported Credentials: {% if export_report | length > 0 %}{{ export_report }}{% else %}None{% endif %}
          Imported Credentials: {% if import_report.imported | length > 0 %}{{ import_report.imported }}{% else %}None{% endif %}
          Skipped on import: {% if import_report.skipped | length > 0 %}{{ import_report.skipped }}{% else %}None{% endif %}
