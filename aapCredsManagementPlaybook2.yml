---
- name: Export AWX objects and decrypt secret fields using awx-manage shell_plus
  hosts: "{{ source_host | default('sourcesys') }}"
  become: yes
  gather_facts: no
  collections:
    - community.general
  vars:
    export_file: "/tmp/exported_creds.json"
    # Extended Python snippet that retrieves various models and decrypts secret fields.
    awx_export_command: >
      awx-manage shell_plus --quiet --command 'from awx.main.models import Credential, CredentialType, Organization, Project, JobTemplate, Team, Role, User; from awx.main.utils.encryption import decrypt_value; import json; SECRET_FIELDS = ["password", "ssh_key_data", "ssh_key_unlock", "become_password", "vault_password", "authorize_password", "secret", "secret_key", "security_token"]; 
      def decrypt_inputs(inputs):
          d = {};
          for k, v in inputs.items():
              if k in SECRET_FIELDS and isinstance(v, str) and v.startswith("$encrypted$"):
                  try:
                      d[k] = decrypt_value(v)
                  except Exception:
                      d[k] = v
              else:
                  d[k] = v;
          return d;
      output = {};
      output["credentials"] = [{"id": c.id, "name": c.name, "credential_type": c.credential_type.name, "inputs": decrypt_inputs(c.inputs)} for c in Credential.objects.all()];
      output["credential_types"] = [{"id": ct.id, "name": ct.name} for ct in CredentialType.objects.all()];
      output["organizations"] = [{"id": org.id, "name": org.name} for org in Organization.objects.all()];
      output["projects"] = [{"id": p.id, "name": p.name} for p in Project.objects.all()];
      output["job_templates"] = [{"id": jt.id, "name": jt.name} for jt in JobTemplate.objects.all()];
      output["teams"] = [{"id": t.id, "name": t.name} for t in Team.objects.all()];
      output["roles"] = [{"id": r.id, "name": r.name} for r in Role.objects.all()];
      output["users"] = [{"id": u.id, "username": u.username} for u in User.objects.all()];
      print(json.dumps(output))'
  tasks:
    - name: Retrieve AWX objects using awx-manage shell_plus
      shell: "{{ awx_export_command }}"
      register: awx_output
      changed_when: false

    - name: Fail if AWX export retrieval failed
      fail:
        msg: "AWX export failed: {{ awx_output.stderr }}"
      when: awx_output.rc != 0

    - name: Set output JSON from AWX
      set_fact:
        awx_export_json: "{{ awx_output.stdout | from_json | to_nice_json }}"

    - name: Debug AWX export JSON
      debug:
        msg: "{{ awx_export_json }}"
      run_once: true

    - name: Indicate start of saving AWX export to local file
      debug:
        msg: "Saving AWX export to {{ export_file }}"
      run_once: true

    - name: Save AWX export to local file
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.copy:
        dest: "{{ export_file }}"
        content: "{{ awx_export_json }}"
      run_once: true

    - name: Indicate successful saving of export file
      debug:
        msg: "AWX export saved to {{ export_file }}"
      run_once: true

    - name: Encrypt the exported file with ansible-vault CLI
      delegate_to: localhost
      connection: local
      become: false
      shell: ansible-vault encrypt {{ export_file }} --vault-password-file {{ vault_password_file }}
      run_once: true

    - name: Record export report
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.set_fact:
        export_report: "{{ {'exported': (awx_export_json | from_json)['credentials'] | map(attribute='name') | list, 'skipped': []} }}"
      run_once: true

    - name: Trigger import handler after export tasks complete
      meta: flush_handlers

    - name: Persist report variables for later plays
      delegate_to: localhost
      connection: local
      become: false
      ansible.builtin.add_host:
        name: report
        export_report: "{{ export_report }}"
        import_report: "{{ import_report | default({}) }}"
      run_once: true

  handlers:
    - name: import_credentials
      tags: import
      block:
        - name: Decrypt the exported file for import (on localhost)
          delegate_to: localhost
          connection: local
          become: false
          shell: ansible-vault decrypt {{ export_file }} --vault-password-file {{ vault_password_file }} --output=/tmp/decrypted_creds.json
          run_once: true

        - name: Copy decrypted file to destination host
          copy:
            src: "/tmp/decrypted_creds.json"
            dest: "/tmp/new_export.json"
          delegate_to: "{{ destination_host }}"

        - name: Import AWX objects using awx-manage shell_plus on destination host
          delegate_to: "{{ destination_host }}"
          become: yes
          shell: >
            awx-manage shell_plus --quiet --command "import json;
            from awx.main.models import Credential, CredentialType, Organization, Project, JobTemplate, Team, Role, User;
            with open('/tmp/new_export.json') as f:
                data = json.load(f);
            imported = [];
            skipped = [];
            # Import credentials (skip duplicates)
            for cred in data.get('credentials', []):
                if not Credential.objects.filter(name=cred['name']).exists():
                    ct = CredentialType.objects.get(name=cred['credential_type'])
                    Credential.objects.create(name=cred['name'], credential_type=ct, inputs=cred['inputs']);
                    imported.append(cred['name']);
                else:
                    skipped.append(cred['name']);
            # You can extend similar logic for other models if desired.
            print(json.dumps({'imported': imported, 'skipped': skipped}))"
          register: import_command_result

        - name: Set import report fact from command output
          delegate_to: localhost
          connection: local
          become: false
          ansible.builtin.set_fact:
            import_report: "{{ import_command_result.stdout | from_json }}"
          run_once: true

        - name: Clean up temporary export file on destination host
          file:
            path: "/tmp/new_export.json"
            state: absent
          delegate_to: "{{ destination_host }}"
          become: yes

        - name: Remove decrypted file on control node
          delegate_to: localhost
          connection: local
          become: false
          ansible.builtin.file:
            path: "/tmp/decrypted_creds.json"
            state: absent
          run_once: true

- name: Print final AWX export/import report
  hosts: report
  gather_facts: no
  collections:
    - community.general
  tasks:
    - name: Display AWX export/import report
      debug:
        msg: |
          === Final Report ===
          Exported Credentials: {{ export_report.exported | default([]) }}
          Imported Credentials: {{ import_report.imported | default('None') }}
          {% if (export_report.skipped | default([])) | length > 0 %}
          Skipped on export: {{ export_report.skipped | default([]) }}
          {% endif %}
          {% if (import_report.skipped | default([])) | length > 0 %}
          Skipped on import: {{ import_report.skipped | default([]) }}
          {% endif %}
      run_once: true
